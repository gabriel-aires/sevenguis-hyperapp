import test from 'ava'
import * as Collection from '../history.js'

test('undo add', t => {
    let x = Collection.init()
    x = Collection.add(x, 'a')
    x = Collection.add(x, 'b')
    x = Collection.undo(x)
    t.deepEqual(Collection.map(x, (id, v) => v).sort(), ['a'])
})
test('redo add', t => {
    let x = Collection.init()
    x = Collection.add(x, 'a')
    x = Collection.add(x, 'b')
    x = Collection.undo(x)
    x = Collection.redo(x)
    t.deepEqual(Collection.map(x, (id, v) => v).sort(), ['a', 'b'])
})
test('undo set', t => {
    let x = Collection.init()
    x = Collection.add(x, 'a')
    x = Collection.add(x, 'b')
    let id = Collection.lastId(x)
    x = Collection.add(x, 'd')
    x = Collection.set(x, id, 'c')
    x = Collection.undo(x)
    t.deepEqual(Collection.map(x, (id, v) => v).sort(), ['a', 'b', 'd'])
})
test('redo set', t => {
    let x = Collection.init()
    x = Collection.add(x, 'a')
    x = Collection.add(x, 'b')
    let id = Collection.lastId(x)
    x = Collection.add(x, 'd')
    x = Collection.set(x, id, 'c')
    x = Collection.undo(x)
    x = Collection.redo(x)
    t.deepEqual(Collection.map(x, (id, v) => v).sort(), ['a', 'c', 'd'])
})
test('undo remove', t => {
    let x = Collection.init()
    x = Collection.add(x, 'a')
    x = Collection.add(x, 'b')
    let bid = Collection.lastId(x)
    x = Collection.add(x, 'c')
    x = Collection.remove(x, bid)
    x = Collection.undo(x)
    t.deepEqual(Collection.map(x, (id, v) => v).sort(), ['a', 'b', 'c'])
})

test('redo remove', t => {
    let x = Collection.init()
    x = Collection.add(x, 'a')
    x = Collection.add(x, 'b')
    let id = Collection.lastId(x)
    x = Collection.add(x, 'c')
    x = Collection.remove(x, id)
    x = Collection.undo(x)
    x = Collection.redo(x)
    t.deepEqual(Collection.map(x, (id, v) => v).sort(), ['a', 'c'])
})
